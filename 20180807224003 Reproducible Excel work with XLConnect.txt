# Connect to a workbook 

## Exercise

When working with `XLConnect`, the first step will be to load a workbook in your R session with [`loadWorkbook()`](http://www.rdocumentation.org/packages/XLConnect/functions/loadWorkbook); this function will build a "bridge" between your Excel file and your R session.

In this and the following exercises, you will continue to work with [`urbanpop.xlsx`](http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx), containing urban population data throughout time. The Excel file is available in your current working directory.

## Instructions

Load the `XLConnect` package using [`library()`](http://www.rdocumentation.org/packages/base/functions/library); it is already installed on DataCamp's servers.
Use [`loadWorkbook()`](http://www.rdocumentation.org/packages/XLConnect/functions/loadWorkbook) to build a connection to the `"urbanpop.xlsx"` file in R. Call the workbook `my_book`.
Print out the class of `my_book`. What does this tell you?

## Code

```
# urbanpop.xlsx is available in your working directory
# Load the XLConnect package
# Build connection to urbanpop.xlsx: my_book
# Print out the class of my_book
 
```

```
# urbanpop.xlsx is available in your working directory
# Load the XLConnect package
library(XLConnect)
# Build connection to urbanpop.xlsx: my_book
my_book &lt;- loadWorkbook("urbanpop.xlsx")
# Print out the class of my_book
class(my_book)
 
```

Nice job! Off to the next step!

# List and read Excel sheets 

## Exercise

Just as `readxl` and `gdata`, you can use `XLConnect` to import data from Excel file into R.

To list the sheets in an Excel file, use [`getSheets()`](http://www.rdocumentation.org/packages/XLConnect/functions/getSheets-methods). To actually import data from a sheet, you can use [`readWorksheet()`](http://www.rdocumentation.org/packages/XLConnect/functions/readWorksheet-methods). Both functions require an XLConnect workbook object as the first argument.

You'll again be working with [`urbanpop.xlsx`](http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx). The `my_book` object that links to this Excel file has already been created.

## Instructions

Print out the sheets of the Excel file that `my_book` links to.
Import the second sheet in `my_book` as a data frame. Print it out.

## Code

```
# XLConnect is already available
# Build connection to urbanpop.xlsx
my_book &lt;- loadWorkbook("urbanpop.xlsx")
# List the sheets in my_book
# Import the second sheet in my_book
 
```

```
# XLConnect is already available
# Build connection to urbanpop.xlsx
my_book &lt;- loadWorkbook("urbanpop.xlsx")
# List the sheets in my_book
getSheets(my_book)
# Import the second sheet in my_book
readWorksheet(my_book, sheet = 2)
 
```

Nice one!

# Customize readWorksheet 

## Exercise

To get a clear overview about [`urbanpop.xlsx`](http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx) without having to open up the Excel file, you can execute the following code:

    my_book <- loadWorkbook("urbanpop.xlsx")
    sheets <- getSheets(my_book)
    all <- lapply(sheets, readWorksheet, object = my_book)
    str(all)

Suppose we're only interested in urban population data of the years 1968, 1969 and 1970. The data for these years is in the columns 3, 4, and 5 of the second sheet. Only selecting these columns will leave us in the dark about the actual countries the figures belong to,

## Instructions

Extend the `readWorksheet()` command with the `startCol` and `endCol` arguments to only import the columns 3, 4, and 5 of the second sheet.
`urbanpop_sel` no longer contains information about the countries now. Can you write another `readWorksheet()` command that imports only the first column from the second sheet? Store the resulting data frame as `countries`.
Use `cbind()` to paste together `countries` and `urbanpop_sel`, in this order. Store the result as `selection`.

## Code

```
# XLConnect is already available
# Build connection to urbanpop.xlsx
my_book &lt;- loadWorkbook("urbanpop.xlsx")
# Import columns 3, 4, and 5 from second sheet in my_book: urbanpop_sel
urbanpop_sel &lt;- readWorksheet(my_book, sheet = 2)
# Import first column from second sheet in my_book: countries
# cbind() urbanpop_sel and countries together: selection
 
```

```
# XLConnect is already available
# Build connection to urbanpop.xlsx
my_book &lt;- loadWorkbook("urbanpop.xlsx")
# Import columns 3, 4, and 5 from second sheet in my_book: urbanpop_sel
urbanpop_sel &lt;- readWorksheet(my_book, sheet = 2, startCol = 3, endCol = 5)
# Import first column from second sheet in my_book: countries
countries &lt;- readWorksheet(my_book, sheet = 2, startCol = 1, endCol = 1)
# cbind() urbanpop_sel and countries together: selection
selection &lt;- cbind(countries, urbanpop_sel)
 
```

Nice one!

# Add worksheet 

## Exercise

Where `readxl` and `gdata` were only able to import Excel data, `XLConnect`'s approach of providing an actual interface to an Excel file makes it able to edit your Excel files from inside R. In this exercise, you'll create a new sheet. In the next exercise, you'll populate the sheet with data, and save the results in a new Excel file.

You'll continue to work with [`urbanpop.xlsx`](http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx). The `my_book` object that links to this Excel file is already available.

## Instructions

Use [`createSheet()`](http://www.rdocumentation.org/packages/XLConnect/functions/createSheet-methods), to create a new sheet in `my_book`, named `"data_summary"`.
Use \[`getSheets()`\] to verify that `my_book` now represents an Excel file with four sheets.

## Code

```
# XLConnect is already available
# Build connection to urbanpop.xlsx
my_book &lt;- loadWorkbook("urbanpop.xlsx")
# Add a worksheet to my_book, named "data_summary"
# Use getSheets() on my_book
 
```

```
# XLConnect is already available
# Build connection to urbanpop.xlsx
my_book &lt;- loadWorkbook("urbanpop.xlsx")
# Add a worksheet to my_book, named "data_summary"
createSheet(my_book, "data_summary")
# Use getSheets() on my_book
getSheets(my_book)
 
```

Great! It's time to populate your newly created worksheet!

# Populate worksheet 

## Exercise

The first step of creating a sheet is done; let's populate it with some data now! `summ`, a data frame with some summary statistics on the two Excel sheets is already coded so you can take it from there.

## Instructions

Use [`writeWorksheet()`](http://www.rdocumentation.org/packages/XLConnect/functions/writeWorksheet-methods) to populate the `"data_summary"` sheet with the `summ` data frame.
Call [`saveWorkbook()`](http://www.rdocumentation.org/packages/XLConnect/functions/saveWorkbook-methods) to store the adapted Excel workbook as a new file, `"summary.xlsx"`.

## Code

```
# XLConnect is already available
# Build connection to urbanpop.xlsx
my_book &lt;- loadWorkbook("urbanpop.xlsx")
# Add a worksheet to my_book, named "data_summary"
createSheet(my_book, "data_summary")
# Create data frame: summ
sheets &lt;- getSheets(my_book)[1:3]
dims &lt;- sapply(sheets, function(x) dim(readWorksheet(my_book, sheet = x)), USE.NAMES = FALSE)
summ &lt;- data.frame(sheets = sheets,
nrows = dims[1, ],
ncols = dims[2, ])
# Add data in summ to "data_summary" sheet
# Save workbook as summary.xlsx
 
```

```
# XLConnect is already available
# Build connection to urbanpop.xlsx
my_book &lt;- loadWorkbook("urbanpop.xlsx")
# Add a worksheet to my_book, named "data_summary"
createSheet(my_book, "data_summary")
# Create data frame: summ
sheets &lt;- getSheets(my_book)[1:3]
dims &lt;- sapply(sheets, function(x) dim(readWorksheet(my_book, sheet = x)), USE.NAMES = FALSE)
summ &lt;- data.frame(sheets = sheets,
nrows = dims[1, ],
ncols = dims[2, ])
# Add data in summ to "data_summary" sheet
writeWorksheet(my_book, summ, "data_summary")
# Save workbook as summary.xlsx
saveWorkbook(my_book, "summary.xlsx")
 
```

Great! If you took the correct steps, the resulting Excel file looks like [this file](https://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/summary.xlsx).

# Renaming sheets 

## Exercise

Come to think of it, `"data_summary"` is not an ideal name. As the summary of these excel sheets is always data-related, you simply want to name the sheet `"summary"`.

The workspace already contains a workbook, `my_book`, that refers to an Excel file with 4 sheets: the three data sheets, and the `"data_summary"` sheet.

## Instructions

Use `renameSheet()` to rename the fourth sheet to `"summary"`.
Next, call `getSheets()` on `my_book` to print out the sheet names.
Finally, make sure to actually save the `my_book` object to a new Excel file, `"renamed.xlsx"`.

## Code

```
# my_book is available
# Rename "data_summary" sheet to "summary"
# Print out sheets of my_book
# Save workbook to "renamed.xlsx"
 
```

```
# my_book is available
# Rename "data_summary" sheet to "summary"
renameSheet(my_book, "data_summary", "summary")
# Print out sheets of my_book
getSheets(my_book)
# Save workbook to "renamed.xlsx"
saveWorkbook(my_book, file = "renamed.xlsx")
 
```

Nice one! You can find the file you just created [here](https://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/renamed.xlsx).

# Removing sheets 

## Exercise

After presenting the new Excel sheet to your peers, it appears not everybody is a big fan. Why summarize sheets and store the info in Excel if all the information is implicitly available? To hell with it, just remove the entire fourth sheet!

## Instructions

Load the `XLConnect` package.
Build a connection to `"renamed.xlsx"`, the Excel file that you've built in the previous exercise; it's available in your working directory. Store this connection as `my_book`.
Use `removeSheet()` to remove the fourth sheet from `my_book`. The sheet name is `"summary"`.
Save the resulting workbook, `my_book`, to a file `"clean.xlsx"`.

## Code

```
# Load the XLConnect package
# Build connection to renamed.xlsx: my_book
# Remove the fourth sheet
# Save workbook to "clean.xlsx"
 
```

```
# Load the XLConnect package
library(XLConnect)
# Build connection to renamed.xlsx: my_book
my_book &lt;- loadWorkbook("renamed.xlsx")
# Remove the fourth sheet
removeSheet(my_book, 4)
# Save workbook to "clean.xlsx"
saveWorkbook(my_book, file = "clean.xlsx")
 
```

Nice one! The file you've created in this exercise is available [here](https://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/clean.xlsx).

