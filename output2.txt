('"["~#iM",["preFetchedData",["^0",["course",["^0",["status","SUCCESS","data",["^ '
 '","id",735,"title","Intro to Python for Data Science","description","Python '
 'is a general-purpose programming language that is becoming more and more '
 'popular for doing data science. Companies worldwide are using Python to '
 'harvest insights from their data and get a competitive edge. Unlike any '
 'other Python tutorial, this course focuses on Python specifically for data '
 'science. In our Intro to Python class, you will learn about powerful ways to '
 'store and manipulate data as well as cool data science tools to start your '
 'own analyses. Enter DataCampâ€™s online Python '
 'curriculum.","short_description","Master the basics of data analysis in '
 'Python. Expand your skill set by learning scientific computing with '
 'numpy.","author_field",null,"author_bio",null,"author_image","https://assets.datacamp.com/production/course_735/author_images/author_pic_filip.jpg?1448636251","nb_of_subscriptions",1073141,"slug","intro-to-python-for-data-science","image_url","https://assets.datacamp.com/production/course_735/shields/thumb/shield_image_course_735_20180801-12-1kes0gd?1533144483","image_thumbnail_url","https://assets.datacamp.com/production/course_735/shields/thumb_home/shield_image_course_735_20180801-12-1kes0gd?1533144483","last_updated_on","07/09/2018","link","https://www.datacamp.com/courses/intro-to-python-for-data-science","should_cache",true,"type","datacamp","difficulty_level",0,"state","live","university",null,"sharing_links",["^ '
 '","twitter","http://bit.ly/1eWTMJh","facebook","http://bit.ly/1iS42Do"],"programming_language","python","paid",false,"time_needed","4 '
 'hours","xp",4700,"topic_id",10,"reduced_outline",null,"runtime_config",null,"lti_only",false,"chapters",[["^ '
 '","id",1842,"title_meta","Chapter 1","^1","Python Basics","^2","An '
 'introduction to the basic concepts of Python. Learn how to use Python both '
 'interactively and through a script. Create your first variables and acquaint '
 "yourself with Python's basic data "
 'types.","number",1,"^8","chapter-1-python-basics","nb_exercises",13,"badge_completed_url","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071277","badge_uncompleted_url","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071277","^;","07/09/2018","slides_link","https://s3.amazonaws.com/assets.datacamp.com/course/intro_to_python/ch1_slides.pdf","free_preview",null,"xp",1050],["^ '
 '","id",1851,"^M","Chapter 2","^1","Python Lists","^2","Learn to store, '
 'access and manipulate data in lists: the first step towards efficiently '
 'working with huge amounts of '
 'data.","^N",2,"^8","chapter-2-python-lists","^O",16,"^P","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071290","^Q","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071290","^;","07/09/2018","^R","https://s3.amazonaws.com/assets.datacamp.com/course/intro_to_python/ch2_slides.pdf","^S",null,"xp",1300],["^ '
 '","id",1852,"^M","Chapter 3","^1","Functions and Packages","^2","To leverage '
 "the code that brilliant Python developers have written, you'll learn about "
 'using functions, methods and packages. This will help you to reduce the '
 'amount of code you need to solve challenging '
 'problems!","^N",3,"^8","chapter-3-functions-and-packages","^O",12,"^P","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071301","^Q","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071301","^;","10/08/2018","^R","https://s3.amazonaws.com/assets.datacamp.com/course/intro_to_python/ch3_slides.pdf","^S",null,"xp",950],["^ '
 '","id",1853,"^M","Chapter 4","^1","NumPy","^2","NumPy is a Python package to '
 'efficiently do data science. Learn to work with the NumPy array, a faster '
 'and more powerful alternative to the list, and take your first steps in data '
 'exploration.","^N",4,"^8","chapter-4-numpy","^O",16,"^P","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071313","^Q","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071313","^;","07/09/2018","^R","https://s3.amazonaws.com/assets.datacamp.com/production/course_4527/slides/ch4_slides.pdf","^S",null,"xp",1400]]]]],"chapter",["^0",["status","SUCCESS","data",["^ '
 '","id",1842,"^M","Chapter 1","^1","Python Basics","^2","An introduction to '
 'the basic concepts of Python. Learn how to use Python both interactively and '
 'through a script. Create your first variables and acquaint yourself with '
 "Python's basic data "
 'types.","^N",1,"^8","chapter-1-python-basics","^O",13,"^P","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071277","^Q","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071277","^;","07/09/2018","^R","https://s3.amazonaws.com/assets.datacamp.com/course/intro_to_python/ch1_slides.pdf","^S",null,"xp",1050]]],"exercises",["^0",["status","SUCCESS","data",[["^ '
 '","id",14251,"^>","VideoExercise","assignment",null,"^1","Hello '
 'Python!","sample_code","","instructions",null,"^N",1,"sct","","pre_exercise_code","","solution","","hint",null,"attachments",null,"xp",50,"possible_answers",[],"feedbacks",[],"question","","video_link","//player.vimeo.com/video/146994261","video_hls","//videos.datacamp.com/transcoded/735_intro_to_python/v2/hls-ch1_1.master.m3u8","aspect_ratio",56.25,"projector_key","course_735_5f61a677bf62c17b450465ee849823ee","language","python","randomNumber",0.9433199627381015],["^ '
 '","id",14023,"^>","NormalExercise","^T","<p>In the Python script on the '
 'right, you can type Python code to solve the exercises. If you hit <em>Run '
 'Code</em> or <em>Submit Answer</em>, your python script '
 '(<code>script.py</code>) is executed and the output is shown in the IPython '
 'Shell. <em>Submit Answer</em> checks whether your submission is correct and '
 'gives you feedback.</p>\\\\n<p>You can hit <em>Run Code</em> and <em>Submit '
 "Answer</em> as often as you want. If you're stuck, you can click <em>Get "
 'Hint</em>, and ultimately <em>Get Solution</em>.</p>\\\\n<p>You can also use '
 'the IPython Shell interactively by simply typing commands and hitting Enter. '
 'When you work in the shell directly, your code will not be checked for '
 'correctness so it is a great way to experiment.</p>","^1","The Python '
 'Interface","^U","# Example, do not modify!\\\\nprint(5 / 8)\\\\n\\\\n# Put '
 'code below here\\\\n","^V","<ul>\\\\n<li>Experiment in the IPython Shell; '
 'type <code>5 / 8</code>, for example.</li>\\\\n<li>Add another line of code '
 'to the Python script: <code>print(7 + 10)</code>.</li>\\\\n<li>Hit '
 '<em>Submit Answer</em> to execute the Python script and receive '
 'feedback.</li>\\\\n</ul>","^N",2,"sct","Ex().has_printout(1, not_printed_msg '
 '= \\\\"__JINJA__:Have you used `{{sol_call}}` to print out the sum of 7 and '
 '10?\\\\")\\\\nsuccess_msg(\\\\"Great! On to the next '
 'one!\\\\")","^W","","^X","# Example, do not modify!\\\\nprint(5 / '
 '8)\\\\n\\\\n# Put code below here\\\\nprint(7 + 10)","^Y","<p>Simply add '
 "<code>print(7 + 10)</code> in the script on the right and hit 'Submit "
 'Answer\'.</p>","^Z",null,"xp",100,"^[",[],"^10",[],"^11","","^16","python","^17",0.22795493652846388],["^ '
 '","id",14024,"^>","MultipleChoiceExercise","^T","<p>Python is a pretty '
 'versatile language. For which applications can you use '
 'Python?</p>","^1","When to use Python?","^U","","^V",["You want to do some '
 'quick calculations.","For your new business, you want to develop a '
 'database-driven website.","Your boss asks you to clean and analyze the '
 'results of the latest satisfaction survey.","All of the '
 'above."],"^N",3,"sct","msg1 = \\\\"Incorrect. Python can do simple and quick '
 'calculations, but it is much more than that!\\\\"\\\\nmsg2 = \\\\"Incorrect. '
 'There is a very popular framework to build database-driven websites '
 '(Django), but Python can do much more.\\\\"\\\\nmsg3 = \\\\"Incorrect. '
 'Python is a powerful tool to do data analysis, but you can also use it for '
 'other ends.\\\\"\\\\nmsg4 = \\\\"Correct! Python is an extremely versatile '
 'language.\\\\"\\\\nEx().has_chosen(4, [msg1, msg2, msg3, '
 'msg4])","^W","","^X","","^Y","<p>Filip mentioned in the video that Python '
 'can be used to build practically any piece of '
 'software.</p>","^Z",null,"xp",50,"^[",[],"^10",[],"^11","","^16","python","^17",0.4470695277109489],["^ '
 '","id",14025,"^>","NormalExercise","^T","<p>Something that Filip didn\'t '
 'mention in his videos is that you can add <strong>comments</strong> to your '
 'Python scripts. Comments are important to make sure that you and others can '
 'understand what your code is about.</p>\\\\n<p>To add comments to your '
 'Python script, you can use the <code>#</code> tag. These comments are not '
 'run as Python code, so they will not influence your result. As an example, '
 'take the comment on the right, <code># Division</code>; it is completely '
 'ignored during execution.</p>","^1","Any comments?","^U","# '
 'Division\\\\nprint(5 / 8)\\\\n\\\\n\\\\nprint(7 + 10)","^V","<p>Above the '
 '<code>print(7 + 10)</code>, add the comment <code># '
 'Addition</code>.</p>","^N",4,"sct","Ex().has_code(\\\\"#\\\\\\\\s*(\\\\\\\\w+)[\\\\\\\\s.!?]*print\\\\\\\\s*\\\\\\\\(\\\\\\\\s*7\\\\", '
 'not_typed_msg = \\\\"Make sure to add the comment right before `print(7 + '
 '10)`.\\\\")\\\\nsuccess_msg(\\\\"Great!\\\\")","^W","","^X","# '
 'Division\\\\nprint(5 / 8)\\\\n\\\\n# Addition\\\\nprint(7 + '
 '10)","^Y","<p>For this exercise you only have to add one line of comments. '
 "It won't run as Python code. Add <code># Addition</code> right above "
 '<code>print(7 + '
 '10)</code>.</p>","^Z",null,"xp",100,"^[",[],"^10",[],"^11","","^16","python","^17",0.9235042773542923],["^ '
 '","id",14026,"^>","NormalExercise","^T","<p>Python is perfectly suited to do '
 'basic calculations. Apart from addition, subtraction, multiplication and '
 'division, there is also support for more advanced operations such '
 'as:</p>\\\\n<ul>\\\\n<li>Exponentiation: <code>**</code>. This operator '
 'raises the number to its left to the power of the number to its right. For '
 'example <code>4**2</code> will give <code>16</code>.</li>\\\\n<li>Modulo: '
 '<code>%</code>. This operator returns the remainder of the division of the '
 'number to the left by the number on its right. For example <code>18 % '
 '7</code> equals <code>4</code>.</li>\\\\n</ul>\\\\n<p>The code in the script '
 'on the right gives some examples.</p>","^1","Python as a calculator","^U","# '
 'Addition, subtraction\\\\nprint(5 + 5)\\\\nprint(5 - 5)\\\\n\\\\n# '
 'Multiplication, division, modulo, and exponentiation\\\\nprint(3 * '
 '5)\\\\nprint(10 / 2)\\\\nprint(18 % 7)\\\\nprint(4 ** 2)\\\\n\\\\n# How much '
 'is your $100 worth after 7 years?\\\\n","^V","<p>Suppose you have $100, '
 "which you can invest with a 10% return each year. After one year, it's "
 '\\\\\\\\(100 \\\\\\\\times 1.1 = 110\\\\\\\\) dollars, and after two years '
 "it's \\\\\\\\(100 \\\\\\\\times 1.1 \\\\\\\\times 1.1 = 121\\\\\\\\). Add "
 'code on the right to calculate how much money you end up with after 7 '
 'years.</p>","^N",5,"sct","Ex().has_printout(6, not_printed_msg = \\\\"Have '
 'you used `print(100 * 1.1 ** 7)` to print out the result of your '
 'calculations?\\\\")\\\\nsuccess_msg(\\\\"Time for another '
 'video!\\\\")","^W","","^X","# Addition, subtraction\\\\nprint(5 + '
 '5)\\\\nprint(5 - 5)\\\\n\\\\n# Multiplication, division, modulo, and '
 'exponentiation\\\\nprint(3 * 5)\\\\nprint(10 / 2)\\\\nprint(18 % '
 '7)\\\\nprint(4 ** 2)\\\\n\\\\n# How much is your $100 worth after 7 '
 'years?\\\\nprint(100 * 1.1 ** 7)","^Y","<p>After two years you have '
 '\\\\\\\\(100 \\\\\\\\times 1.1 \\\\\\\\times 1.1 = 100 \\\\\\\\times '
 '1.1^2\\\\\\\\). How much do you have after 7 years than? Use <code>*</code> '
 'and '
 '<code>**</code>.</p>","^Z",null,"xp",100,"^[",[],"^10",[],"^11","","^16","python","^17",0.11540931103174779],["^ '
 '","id",14293,"^>","VideoExercise","^T",null,"^1","Variables & '
 'Types","^U","","^V",null,"^N",6,"sct","","^W","","^X","","^Y",null,"^Z",null,"xp",50,"^[",[],"^10",[],"^11","","^12","//player.vimeo.com/video/154561704","^13","//videos.datacamp.com/transcoded/735_intro_to_python/v1/hls-ch1_2.master.m3u8","^14",56.25,"^15","course_735_7df0925250c5fb2a647cd76fb09d446e","^16","python","^17",0.16483831272137017],["^ '
 '","id",14043,"^>","NormalExercise","^T","<p>In Python, a variable allows you '
 'to refer to a value with a name. To create a variable use <code>=</code>, '
 'like this example:</p>\\\\n<pre><code>x = 5\\\\n</code></pre>\\\\n<p>You can '
 'now use the name of this variable, <code>x</code>, instead of the actual '
 'value, <code>5</code>.</p>\\\\n<p>Remember, <code>=</code> in Python means '
 '<em>assignment</em>, it doesn\'t test equality!</p>","^1","Variable '
 'Assignment","^U","# Create a variable savings\\\\n\\\\n\\\\n# Print out '
 'savings\\\\n","^V","<ul>\\\\n<li>Create a variable <code>savings</code> with '
 'the value 100.</li>\\\\n<li>Check out this variable by typing '
 '<code>print(savings)</code> in the '
 'script.</li>\\\\n</ul>","^N",7,"sct","Ex().check_object(\\\\"savings\\\\").has_equal_value(incorrect_msg=\\\\"Assign '
 '`100` to the variable `savings`.\\\\")\\\\nEx().has_printout(0, '
 'not_printed_msg = \\\\"Print out `savings`, the variable you created, with '
 '`print(savings)`.\\\\")\\\\nsuccess_msg(\\\\"Great! Let\'s try to do some '
 'calculations with this variable now!\\\\")","^W","","^X","# Create a '
 'variable savings\\\\nsavings = 100\\\\n\\\\n# Print out '
 'savings\\\\nprint(savings)","^Y","<ul>\\\\n<li>Type <code>savings = '
 '100</code> to create the variable <code>savings</code>.</li>\\\\n<li>After '
 'creating the variable <code>savings</code>, you can type '
 '<code>print(savings)</code>.</li>\\\\n</ul>","^Z",null,"xp",100,"^[",[],"^10",[],"^11","","^16","python","^17",0.7161248444981172],["^ '
 '","id",13726,"^>","NormalExercise","^T","<p>Remember how you calculated the '
 'money you ended up with after 7 years of investing $100? You did something '
 'like this:</p>\\\\n<pre><code>100 * 1.10 ** '
 '7\\\\n</code></pre>\\\\n<p>Instead of calculating with the actual values, '
 "you can use variables instead. The <code>savings</code> variable you've "
 "created in the previous exercise represents the $100 you started with. It's "
 'up to you to create a new variable to represent <code>1.10</code> and then '
 'redo the calculations!</p>","^1","Calculations with variables","^U","# '
 'Create a variable savings\\\\nsavings = 100\\\\n\\\\n# Create a variable '
 'factor\\\\n\\\\n\\\\n# Calculate result\\\\n\\\\n\\\\n# Print out '
 'result","^V","<ul>\\\\n<li>Create a variable <code>factor</code>, equal to '
 '<code>1.10</code>.</li>\\\\n<li>Use <code>savings</code> and '
 '<code>factor</code> to calculate the amount of money you end up with after 7 '
 'years. Store the result in a new variable, '
 '<code>result</code>.</li>\\\\n<li>Print out the value of '
 '<code>result</code>.</li>\\\\n</ul>","^N",8,"sct","Ex().check_correct(\\\\n  '
 'check_object(\\\\"result\\\\").has_equal_value(incorrect_msg=\\\\"Have you '
 'used `*` and `**` to calculate `result`?\\\\"),\\\\n  multi(\\\\n    '
 'check_object(\\\\"savings\\\\", missing_msg=\\\\"The variable `savings` was '
 "defined for you, don't remove "
 'it!\\\\").has_equal_value(incorrect_msg=\\\\"The variable `savings` should '
 'be `100`, like it was defined for you.\\\\"),\\\\n    '
 'check_object(\\\\"factor\\\\").has_equal_value(incorrect_msg=\\\\"The value '
 'of `factor` should be `1.1`.\\\\")\\\\n  )\\\\n)\\\\nEx().has_printout(0, '
 'not_printed_msg=\\\\"Don\'t forget to print out `result` at the end of your '
 'script.\\\\")\\\\nsuccess_msg(\\\\"Great!\\\\")","^W","","^X","# Create a '
 'variable savings\\\\nsavings = 100\\\\n\\\\n# Create a variable '
 'factor\\\\nfactor = 1.1\\\\n\\\\n# Calculate result\\\\nresult = savings * '
 'factor ** 7\\\\n\\\\n# Print out '
 'result\\\\nprint(result)","^Y","<ul>\\\\n<li>To create the variable '
 '<code>factor</code>, use <code>factor = 1.10</code>.</li>\\\\n<li>In the '
 'example code block of the assignment, replace <code>100</code> with '
 '<code>savings</code> and <code>1.10</code> with <code>factor</code>: '
 '<code>savings * factor ** 7</code>.</li>\\\\n<li>Use the <a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#print\\\\"><code>print()</code></a> '
 'function to print the value of a '
 'variable.</li>\\\\n</ul>","^Z",null,"xp",100,"^[",[],"^10",[],"^11","","^16","python","^17",0.4068100309450833],["^ '
 '","id",14044,"^>","NormalExercise","^T","<p>In the previous exercise, you '
 'worked with two Python data types:</p>\\\\n<ul>\\\\n<li><code>int</code>, or '
 'integer: a number without a fractional part. <code>savings</code>, with the '
 'value <code>100</code>, is an example of an '
 'integer.</li>\\\\n<li><code>float</code>, or floating point: a number that '
 'has both an integer and fractional part, separated by a point. '
 '<code>factor</code>, with the value <code>1.10</code>, is an example of a '
 'float.</li>\\\\n</ul>\\\\n<p>Next to numerical data types, there are two '
 'other very common data types:</p>\\\\n<ul>\\\\n<li><code>str</code>, or '
 'string: a type to represent text. You can use single or double quotes to '
 'build a string.</li>\\\\n<li><code>bool</code>, or boolean: a type to '
 'represent logical values. Can only be <code>True</code> or '
 '<code>False</code> (the capitalization is '
 'important!).</li>\\\\n</ul>","^1","Other variable types","^U","# Create a '
 'variable desc\\\\n\\\\n\\\\n# Create a variable '
 'profitable\\\\n","^V","<ul>\\\\n<li>Create a new string, <code>desc</code>, '
 'with the value <code>\\\\"compound interest\\\\"</code>.</li>\\\\n<li>Create '
 'a new boolean, <code>profitable</code>, with the value '
 '<code>True</code>.</li>\\\\n</ul>","^N",9,"sct","Ex().check_object(\\\\"desc\\\\").has_equal_value()\\\\nEx().check_object(\\\\"profitable\\\\").has_equal_value()\\\\nsuccess_msg(\\\\"Nice!\\\\")","^W","","^X","# '
 'Create a variable desc\\\\ndesc = \\\\"compound interest\\\\"\\\\n\\\\n# '
 'Create a variable profitable\\\\nprofitable = True","^Y","<ul>\\\\n<li>To '
 'create a variable in Python, use <code>=</code>. Make sure to wrap your '
 'string in single or double quotes.</li>\\\\n<li>Only two boolean values '
 'exist in Python: <code>True</code> and <code>False</code>. '
 '<code>TRUE</code>, <code>true</code>, <code>FALSE</code>, <code>false</code> '
 'and other versions will not be '
 'accepted.</li>\\\\n</ul>","^Z",null,"xp",100,"^[",[],"^10",[],"^11","","^16","python","^17",0.8141841437979944],["^ '
 '","id",14347,"^>","MultipleChoiceExercise","^T","<p>To find out the type of '
 'a value or a variable that refers to that value, you can use the <a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#type\\\\"><code>type()</code></a> '
 "function. Suppose you've defined a variable <code>a</code>, but you forgot "
 'the type of this variable. To determine the type of <code>a</code>, simply '
 'execute:</p>\\\\n<pre><code>type(a)\\\\n</code></pre>\\\\n<p>We already went '
 'ahead and created three variables: <code>a</code>, <code>b</code> and '
 '<code>c</code>. You can use the IPython shell on the right to discover their '
 'type. Which of the following options is correct?</p>","^1","Guess the '
 'type","^U","","^V",["<code>a</code> is of type <code>int</code>, '
 '<code>b</code> is of type <code>str</code>, <code>c</code> is of type '
 '<code>bool</code>","<code>a</code> is of type <code>float</code>, '
 '<code>b</code> is of type <code>bool</code>, <code>c</code> is of type '
 '<code>str</code>","<code>a</code> is of type <code>float</code>, '
 '<code>b</code> is of type <code>str</code>, <code>c</code> is of type '
 '<code>bool</code>","<code>a</code> is of type <code>int</code>, '
 '<code>b</code> is of type <code>bool</code>, <code>c</code> is of type '
 '<code>str</code>"],"^N",10,"sct","msg1 = \\\\"The type of `a` is not `int`. '
 'Try out `type(a)` and see for yourself.\\\\"\\\\nmsg2 = \\\\"`b` is not a '
 "`bool`, it's a `str`! The fact that `True` is wrapped in double quotes makes "
 'it a string.\\\\"\\\\nmsg3 = \\\\"Correcto perfecto!\\\\"\\\\nmsg4 = '
 '\\\\"None of the variable\'s types is correct here. Try `type(a)` and see '
 'what type this variable is.\\\\"\\\\nEx().has_chosen(3,[msg1, msg2, msg3, '
 'msg4])","^W","a = 100*1.1**7\\\\nb = \\\\"True\\\\"\\\\nc = '
 'False","^X","","^Y","<p>Use <code>type(a)</code>, <code>type(b)</code> and '
 '<code>type(c)</code> inside the IPython Shell to find out about the '
 "variables' "
 'types.</p>","^Z",null,"xp",50,"^[",[],"^10",[],"^11","","^16","python","^17",0.6940170179963574],["^ '
 '","id",14046,"^>","NormalExercise","^T","<p>Filip mentioned that different '
 'types behave differently in Python.</p>\\\\n<p>When you sum two strings, for '
 "example, you'll get different behavior than when you sum two integers or two "
 'booleans.</p>\\\\n<p>In the script some variables with different types have '
 'already been created. It\'s up to you to use them.</p>","^1","Operations '
 'with other types","^U","savings = 100\\\\nfactor = 1.1\\\\ndesc = '
 '\\\\"compound interest\\\\"\\\\n\\\\n# Assign product of factor and savings '
 'to year1\\\\n\\\\n\\\\n# Print the type of year1\\\\n\\\\n\\\\n# Assign sum '
 'of desc and desc to doubledesc\\\\n\\\\n\\\\n# Print out '
 'doubledesc\\\\n","^V","<ul>\\\\n<li>Calculate the product of '
 '<code>savings</code> and <code>factor</code>. Store the result in '
 '<code>year1</code>.</li>\\\\n<li>What do you think the resulting type will '
 'be? Find out by printing out the type of '
 '<code>year1</code>.</li>\\\\n<li>Calculate the sum of <code>desc</code> and '
 '<code>desc</code> and store the result in a new variable '
 '<code>doubledesc</code>.</li>\\\\n<li>Print out <code>doubledesc</code>. Did '
 'you expect this?</li>\\\\n</ul>","^N",11,"sct","# predefined\\\\nmsg = '
 '\\\\"You don\'t have to change or remove the predefined '
 'variables.\\\\"\\\\nobjs = [\\\\"savings\\\\", \\\\"factor\\\\", '
 '\\\\"desc\\\\", \\\\"year1\\\\"]\\\\nEx().multi(\\\\n    '
 "check_object('savings', "
 'missing_msg=msg).has_equal_value(incorrect_msg=msg),\\\\n    '
 "check_object('factor', "
 'missing_msg=msg).has_equal_value(incorrect_msg=msg),\\\\n    '
 "check_object('desc', "
 'missing_msg=msg).has_equal_value(incorrect_msg=msg),\\\\n    '
 "check_object('year1', "
 'missing_msg=msg).has_equal_value(incorrect_msg=msg)\\\\n)\\\\n\\\\n# check '
 'year1 and printout\\\\nEx().multi(\\\\n    '
 'check_object(\\\\"year1\\\\").has_equal_value(incorrect_msg=\\\\"Multiply '
 '`savings` and `factor` to create the `year1` variable.\\\\"),\\\\n    '
 'has_printout(0, not_printed_msg = \\\\"__JINJA__:Use `{{sol_call}}` to print '
 'out the type of `year1`.\\\\")\\\\n)\\\\n\\\\n# check doubledesc and '
 'prinout\\\\nEx().multi(\\\\n    '
 'check_object(\\\\"doubledesc\\\\").has_equal_value(incorrect_msg  = '
 '\\\\"Have you stored the result of `desc + desc` in '
 '`doubledesc`?\\\\"),\\\\n    has_printout(1, not_printed_msg = \\\\"Don\'t '
 'forget to print out '
 '`doubledesc`.\\\\")\\\\n)\\\\n\\\\nsuccess_msg(\\\\"Nice. Notice how `desc + '
 'desc` causes `\\\\\\\\\\\\"compound interest\\\\\\\\\\\\"` and '
 '`\\\\\\\\\\\\"compound interest\\\\\\\\\\\\"` to be pasted '
 'together.\\\\")","^W","","^X","savings = 100\\\\nfactor = 1.1\\\\ndesc = '
 '\\\\"compound interest\\\\"\\\\n\\\\n# Assign product of savings and factor '
 'to year1\\\\nyear1 = savings * factor\\\\n\\\\n# Print the type of '
 'year1\\\\nprint(type(year1))\\\\n\\\\n# Assign sum of desc and desc to '
 'doubledesc\\\\ndoubledesc = desc + desc\\\\n\\\\n# Print out '
 'doubledesc\\\\nprint(doubledesc)","^Y","<ul>\\\\n<li>Assign <code>factor * '
 'savings</code> to a new variable, <code>year1</code>.</li>\\\\n<li>To print '
 'the type of a variable <code>x</code>, use '
 '<code>print(type(x))</code>.</li>\\\\n<li>Assign <code>desc + desc</code> to '
 'a new variable, <code>doubledesc</code>.</li>\\\\n<li>To print a variable '
 '<code>x</code>, write <code>print(x)</code> in the '
 'script.</li>\\\\n</ul>","^Z",null,"xp",100,"^[",[],"^10",[],"^11","","^16","python","^17",0.5707300520766649],["^ '
 '","id",14047,"^>","NormalExercise","^T","<p>Using the <code>+</code> '
 'operator to paste together two strings can be very useful in building custom '
 "messages.</p>\\\\n<p>Suppose, for example, that you've calculated the return "
 'of your investment and want to summarize the results in a string. Assuming '
 'the floats <code>savings</code> and <code>result</code> are defined, you can '
 'try something like this:</p>\\\\n<pre><code>print(\\\\"I started with $\\\\" '
 '+ savings + \\\\" and now have $\\\\" + result + \\\\". '
 'Awesome!\\\\")\\\\n</code></pre>\\\\n<p>This will not work, though, as you '
 "cannot simply sum strings and floats.</p>\\\\n<p>To fix the error, you'll "
 'need to explicitly convert the types of your variables. More specifically, '
 "you'll need <a "
 'href=\\\\"https://docs.python.org/3/library/functions.html#func-str\\\\"><code>str()</code></a>, '
 'to convert a value into a string. <code>str(savings)</code>, for example, '
 'will convert the float <code>savings</code> to a string.</p>\\\\n<p>Similar '
 'functions such as <a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#int\\\\"><code>int()</code></a>, '
 '<a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#float\\\\"><code>float()</code></a> '
 'and <a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#bool\\\\"><code>bool()</code></a> '
 'will help you convert Python values into any type.</p>","^1","Type '
 'conversion","^U","# Definition of savings and result\\\\nsavings = '
 '100\\\\nresult = 100 * 1.10 ** 7\\\\n\\\\n# Fix the '
 'printout\\\\nprint(\\\\"I started with $\\\\" + savings + \\\\" and now have '
 '$\\\\" + result + \\\\". Awesome!\\\\")\\\\n\\\\n# Definition of '
 'pi_string\\\\npi_string = \\\\"3.1415926\\\\"\\\\n\\\\n# Convert pi_string '
 'into float: pi_float\\\\n","^V","<ul>\\\\n<li>Hit <em>Run Code</em> to run '
 'the code on the right. Try to understand the error message.</li>\\\\n<li>Fix '
 'the code on the right such that the printout runs without errors; use the '
 'function <a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#func-str\\\\"><code>str()</code></a> '
 'to convert the variables to strings.</li>\\\\n<li>Convert the variable '
 '<code>pi_string</code> to a float and store this float as a new variable, '
 '<code>pi_float</code>.</li>\\\\n</ul>","^N",12,"sct","\\\\n# ensure '
 'predefined values are unmodified\\\\nmsg = \\\\"You don\'t have to change or '
 'remove the predefined variables.\\\\"\\\\nEx().multi(\\\\n    '
 'check_object(\\\\"savings\\\\", '
 'missing_msg=msg).has_equal_value(incorrect_msg=msg),\\\\n    '
 'check_object(\\\\"result\\\\", '
 'missing_msg=msg).has_equal_value(incorrect_msg=msg)\\\\n)\\\\n\\\\nEx().check_correct(\\\\n    '
 'has_printout(0),\\\\n    multi(\\\\n        check_function(\\\\"str\\\\", '
 '0).check_args(0).has_equal_value(incorrect_msg=\\\\"Inside the `print()` '
 'command, make sure to convert `savings` into a string with '
 '`str(savings)`.\\\\"),\\\\n        check_function(\\\\"str\\\\", '
 '1).check_args(0).has_equal_value(incorrect_msg=\\\\"Inside the `print()` '
 'command, make sure to convert `result` into a string '
 '`str(result)`.\\\\")\\\\n    )\\\\n)\\\\n\\\\n# check '
 'pi_float\\\\nEx().check_correct(\\\\n    '
 'check_object(\\\\"pi_float\\\\").has_equal_value(),\\\\n    '
 'multi(\\\\n        '
 'check_object(\\\\"pi_string\\\\").has_equal_value(),\\\\n        '
 'check_function(\\\\"float\\\\", missing_msg = \\\\"In order to convert '
 '`pi_string` to a float, be sure to use the `float()` '
 'function.\\\\").has_equal_value(incorrect_msg=\\\\"Use `float(pi_string) to '
 'create the variable `pi_float`.\\\\")\\\\n    '
 ')\\\\n)\\\\n\\\\nsuccess_msg(\\\\"Great! You have a profit of around $95; '
 'that\'s pretty awesome indeed!\\\\")","^W","","^X","# Definition of savings '
 'and result\\\\nsavings = 100\\\\nresult = 100 * 1.10 ** 7\\\\n\\\\n# Fix the '
 'printout\\\\nprint(\\\\"I started with $\\\\" + str(savings) + \\\\" and now '
 'have $\\\\" + str(result) + \\\\". Awesome!\\\\")\\\\n\\\\n# Definition of '
 'pi_string\\\\npi_string = \\\\"3.1415926\\\\"\\\\n\\\\n# Convert pi_string '
 'into float: pi_float\\\\npi_float = float(pi_string)","^Y","<ul>\\\\n<li>You '
 'should use <a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#func-str\\\\"><code>str()</code></a> '
 'twice!</li>\\\\n<li>Use <a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#float\\\\"><code>float()</code></a> '
 'on <code>pi_string</code> and store the result in '
 '<code>pi_float</code>.</li>\\\\n</ul>","^Z",null,"xp",100,"^[",[],"^10",[],"^11","","^16","python","^17",0.747138727665914],["^ '
 '","id",14253,"^>","MultipleChoiceExercise","^T","<p>Now that you know '
 'something more about combining different sources of information, have a look '
 'at the four Python expressions below.\\\\nWhich one of these will throw an '
 'error? You can always copy and paste this code in the IPython Shell to find '
 'out!</p>","^1","Can Python handle everything?","^U","","^V",["<code>\\\\"I '
 'can add integers, like \\\\"  + str(5) + \\\\" to '
 'strings.\\\\"</code>","<code>\\\\"I said \\\\" + (\\\\"Hey \\\\" * 2) + '
 '\\\\"Hey!\\\\"</code>","<code>\\\\"The correct answer to this multiple '
 'choice exercise is answer number \\\\" + 2</code>","<code>True + '
 'False</code>"],"^N",13,"sct","msg1 = \\\\"Incorrect, this command runs '
 'perfectly fine.\\\\"\\\\nmsg2 = \\\\"It\'s perfectly possible to \'multiply '
 'strings\' in Python...\\\\"\\\\nmsg3 = \\\\"Correct! Because you\'re not '
 'converting `2` to a string with '
 '[`str()`](https://docs.python.org/3/library/functions.html#func-str), this '
 'will give an error.\\\\"\\\\nmsg4 = \\\\"`True + False` doesn\'t error out. '
 'Feel free to try it in the console to confirm!\\\\"\\\\nEx().has_chosen(3, '
 '[msg1, msg2, msg3, msg4])","^W","","^X","","^Y","<p>Copy and paste the '
 'different expressions into the IPython Shell and try to figure out which one '
 'throws an '
 'error.</p>","^Z",null,"xp",50,"^[",[],"^10",[],"^11","","^16","python","^17",0.6339644897983434]]]],"activeImage",["^0",["status","SUCCESS","data","course-735-master:d1a39bda063d5dc0447142965e80d251-20180907153101996"]],"sharedImage",["^0",["status","SUCCESS","data","shared-python:f4a51d9e9e71b1db29930394ded335cb-20180926095819076"]]]],"systemStatus",["^0",["indicator","none","description","No '
 'status has been fetched from the Status '
 'Page."]],"backendSession",["^0",["status",["^0",["code","none","text",""]],"isInitSession",false,"message",null]],"settings",["^0",["uiTheme","LIGHT","isOnboarding",false]],"autocomplete",["^0",[]],"user",["^0",["status",null,"settings",["^0",[]]]],"fileBrowser",["^0",["isVisible",true,"fileSelected",null]],"chapter",["^0",["current",["^0",["badge_uncompleted_url","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071277","number",1,"slug","chapter-1-python-basics","last_updated_on","07/09/2018","title_meta","Chapter '
 '1","nb_exercises",13,"free_preview",null,"slides_link","https://s3.amazonaws.com/assets.datacamp.com/course/intro_to_python/ch1_slides.pdf","title","Python '
 'Basics","xp",1050,"id",1842,"description","An introduction to the basic '
 'concepts of Python. Learn how to use Python both interactively and through a '
 "script. Create your first variables and acquaint yourself with Python's "
 'basic data '
 'types.","badge_completed_url","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071277"]]]],"boot",["^0",["bootState","PRE_BOOTED","error",null]],"location",["^0",["current",["^0",["pathname","/courses/intro-to-python-for-data-science/chapter-1-python-basics","query",["^0",["ex",2]]]],"canonical",null]],"course",["^0",["difficulty_level",0,"reduced_outline",null,"shared_image","shared-python:f4a51d9e9e71b1db29930394ded335cb-20180926095819076","active_image","course-735-master:d1a39bda063d5dc0447142965e80d251-20180907153101996","author_field",null,"chapters",["~#iL",[["^0",["badge_uncompleted_url","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071277","number",1,"slug","chapter-1-python-basics","last_updated_on","07/09/2018","title_meta","Chapter '
 '1","nb_exercises",13,"free_preview",null,"slides_link","https://s3.amazonaws.com/assets.datacamp.com/course/intro_to_python/ch1_slides.pdf","title","Python '
 'Basics","xp",1050,"id",1842,"description","An introduction to the basic '
 'concepts of Python. Learn how to use Python both interactively and through a '
 "script. Create your first variables and acquaint yourself with Python's "
 'basic data '
 'types.","badge_completed_url","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071277"]],["^0",["badge_uncompleted_url","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071290","number",2,"slug","chapter-2-python-lists","last_updated_on","07/09/2018","title_meta","Chapter '
 '2","nb_exercises",16,"free_preview",null,"slides_link","https://s3.amazonaws.com/assets.datacamp.com/course/intro_to_python/ch2_slides.pdf","title","Python '
 'Lists","xp",1300,"id",1851,"description","Learn to store, access and '
 'manipulate data in lists: the first step towards efficiently working with '
 'huge amounts of '
 'data.","badge_completed_url","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071290"]],["^0",["badge_uncompleted_url","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071301","number",3,"slug","chapter-3-functions-and-packages","last_updated_on","10/08/2018","title_meta","Chapter '
 '3","nb_exercises",12,"free_preview",null,"slides_link","https://s3.amazonaws.com/assets.datacamp.com/course/intro_to_python/ch3_slides.pdf","title","Functions '
 'and Packages","xp",950,"id",1852,"description","To leverage the code that '
 "brilliant Python developers have written, you'll learn about using "
 'functions, methods and packages. This will help you to reduce the amount of '
 'code you need to solve challenging '
 'problems!","badge_completed_url","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071301"]],["^0",["badge_uncompleted_url","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071313","number",4,"slug","chapter-4-numpy","last_updated_on","07/09/2018","title_meta","Chapter '
 '4","nb_exercises",16,"free_preview",null,"slides_link","https://s3.amazonaws.com/assets.datacamp.com/production/course_4527/slides/ch4_slides.pdf","title","NumPy","xp",1400,"id",1853,"description","NumPy '
 'is a Python package to efficiently do data science. Learn to work with the '
 'NumPy array, a faster and more powerful alternative to the list, and take '
 'your first steps in data '
 'exploration.","badge_completed_url","https://assets.datacamp.com/production/course_735/badges/intro_python.png?1452071313"]]]],"time_needed","4 '
 'hours","author_image","https://assets.datacamp.com/production/course_735/author_images/author_pic_filip.jpg?1448636251","runtime_config",null,"lti_only",false,"image_url","https://assets.datacamp.com/production/course_735/shields/thumb/shield_image_course_735_20180801-12-1kes0gd?1533144483","topic_id",10,"slug","intro-to-python-for-data-science","last_updated_on","07/09/2018","paid",false,"university",null,"state","live","author_bio",null,"should_cache",true,"sharing_links",["^0",["twitter","http://bit.ly/1eWTMJh","facebook","http://bit.ly/1iS42Do"]],"title","Intro '
 'to Python for Data '
 'Science","xp",4700,"image_thumbnail_url","https://assets.datacamp.com/production/course_735/shields/thumb_home/shield_image_course_735_20180801-12-1kes0gd?1533144483","short_description","Master '
 'the basics of data analysis in Python. Expand your skill set by learning '
 'scientific computing with '
 'numpy.","nb_of_subscriptions",1073141,"type","datacamp","link","https://www.datacamp.com/courses/intro-to-python-for-data-science","id",735,"description","Python '
 'is a general-purpose programming language that is becoming more and more '
 'popular for doing data science. Companies worldwide are using Python to '
 'harvest insights from their data and get a competitive edge. Unlike any '
 'other Python tutorial, this course focuses on Python specifically for data '
 'science. In our Intro to Python class, you will learn about powerful ways to '
 'store and manipulate data as well as cool data science tools to start your '
 'own analyses. Enter DataCampâ€™s online Python '
 'curriculum.","programming_language","python"]],"exercises",["^0",["current",1,"all",["^18",[["^0",["sample_code","","sct","","aspect_ratio",56.25,"instructions",null,"question","","hint",null,"possible_answers",["^18",[]],"number",1,"video_hls","//videos.datacamp.com/transcoded/735_intro_to_python/v2/hls-ch1_1.master.m3u8","randomNumber",0.9433199627381015,"assignment",null,"feedbacks",["^18",[]],"attachments",null,"title","Hello '
 'Python!","xp",50,"language","python","pre_exercise_code","","solution","","type","VideoExercise","id",14251,"projector_key","course_735_5f61a677bf62c17b450465ee849823ee","video_link","//player.vimeo.com/video/146994261"]],["^0",["sample_code","# '
 'Example, do not modify!\\\\nprint(5 / 8)\\\\n\\\\n# Put code below '
 'here\\\\n","sct","Ex().has_printout(1, not_printed_msg = \\\\"__JINJA__:Have '
 'you used `{{sol_call}}` to print out the sum of 7 and '
 '10?\\\\")\\\\nsuccess_msg(\\\\"Great! On to the next '
 'one!\\\\")","instructions","<ul>\\\\n<li>Experiment in the IPython Shell; '
 'type <code>5 / 8</code>, for example.</li>\\\\n<li>Add another line of code '
 'to the Python script: <code>print(7 + 10)</code>.</li>\\\\n<li>Hit '
 '<em>Submit Answer</em> to execute the Python script and receive '
 'feedback.</li>\\\\n</ul>","question","","hint","<p>Simply add <code>print(7 '
 "+ 10)</code> in the script on the right and hit 'Submit "
 'Answer\'.</p>","possible_answers",["^18",[]],"number",2,"user",["^0",["isHintShown",false,"rstudio",["^0",["isReady",false,"settings",["^0",[]],"showHistory",false,"cards",["^0",["messages",["^18",[]],"currentRow",0]]]],"editorTabs",["^0",["files/script.py",["^0",["title","script.py","props",["^0",["active",true,"isClosable",false,"code","# '
 'Example, do not modify!\\\\nprint(5 / 8)\\\\n\\\\n# Put code below '
 'here\\\\n","extra",["^0",[]],"resetCode","# Example, do not '
 'modify!\\\\nprint(5 / 8)\\\\n\\\\n# Put code below '
 'here\\\\n"]]]]]],"fileBrowser",["^0",["sampleCode",["^0",["fileSelected",null,"files",["^0",["name","files","isOpen",true,"children",["^18",[["^0",["name","script.py","initialContent","# '
 'Example, do not modify!\\\\nprint(5 / 8)\\\\n\\\\n# Put code below '
 'here\\\\n","content","# Example, do not modify!\\\\nprint(5 / 8)\\\\n\\\\n# '
 'Put code below '
 'here\\\\n","isClosable",false]]]]]]]],"solution",["^0",["fileSelected",null,"files",["^0",["name","solution","isOpen",true,"children",["^18",[["^0",["name","solution.py","initialContent","# '
 'Example, do not modify!\\\\nprint(5 / 8)\\\\n\\\\n# Put code below '
 'here\\\\nprint(7 + 10)","content","# Example, do not modify!\\\\nprint(5 / '
 '8)\\\\n\\\\n# Put code below here\\\\nprint(7 + '
 '10)","isClosable",false]]]]]]]]]],"outputMarkdownTabs",["^0",[]],"markdown",["^0",["titles",["^18",["Knit '
 'PDF","Knit HTML"]],"activeTitle","Knit '
 'HTML"]],"currentXp",100,"graphicalTabs",["^0",["plot",["^0",["extraClass","animation--flash","title","Plots","props",["^0",["sources",["^18",[]],"currentIndex",0]]]],"html",["^0",["extraClass","animation--flash","title","HTML '
 'Viewer","props",["^0",["sources",["^18",[]],"currentIndex",0]]]]]],"feedbackMessages",["^18",[]],"lastSubmittedCode",null,"ltiStatus",["^0",[]],"lastSubmitActiveEditorTab",null,"consoleSqlTabs",["^0",["query_result",["^0",["extraClass","","title","query '
 'result","props",["^0",["active",true,"isNotView",true,"message","No query '
 'executed '
 'yet..."]]]]]],"consoleTabs",["^0",["console",["^0",["title","IPython '
 'Shell","props",["^0",["active",true]]]],"slides",["^0",["title","Slides","props",["^0",["active",false]]]]]],"inputMarkdownTabs",["^0",[]]]],"randomNumber",0.22795493652846388,"assignment","<p>In '
 'the Python script on the right, you can type Python code to solve the '
 'exercises. If you hit <em>Run Code</em> or <em>Submit Answer</em>, your '
 'python script (<code>script.py</code>) is executed and the output is shown '
 'in the IPython Shell. <em>Submit Answer</em> checks whether your submission '
 'is correct and gives you feedback.</p>\\\\n<p>You can hit <em>Run Code</em> '
 "and <em>Submit Answer</em> as often as you want. If you're stuck, you can "
 'click <em>Get Hint</em>, and ultimately <em>Get '
 'Solution</em>.</p>\\\\n<p>You can also use the IPython Shell interactively '
 'by simply typing commands and hitting Enter. When you work in the shell '
 'directly, your code will not be checked for correctness so it is a great way '
 'to experiment.</p>","feedbacks",["^18",[]],"attachments",null,"title","The '
 'Python '
 'Interface","xp",100,"language","python","pre_exercise_code","","solution","# '
 'Example, do not modify!\\\\nprint(5 / 8)\\\\n\\\\n# Put code below '
 'here\\\\nprint(7 + '
 '10)","type","NormalExercise","id",14023]],["^0",["sample_code","","sct","msg1 '
 '= \\\\"Incorrect. Python can do simple and quick calculations, but it is '
 'much more than that!\\\\"\\\\nmsg2 = \\\\"Incorrect. There is a very popular '
 'framework to build database-driven websites (Django), but Python can do much '
 'more.\\\\"\\\\nmsg3 = \\\\"Incorrect. Python is a powerful tool to do data '
 'analysis, but you can also use it for other ends.\\\\"\\\\nmsg4 = '
 '\\\\"Correct! Python is an extremely versatile '
 'language.\\\\"\\\\nEx().has_chosen(4, [msg1, msg2, msg3, '
 'msg4])","instructions",["^18",["You want to do some quick '
 'calculations.","For your new business, you want to develop a database-driven '
 'website.","Your boss asks you to clean and analyze the results of the latest '
 'satisfaction survey.","All of the above."]],"question","","hint","<p>Filip '
 'mentioned in the video that Python can be used to build practically any '
 'piece of '
 'software.</p>","possible_answers",["^18",[]],"number",3,"randomNumber",0.4470695277109489,"assignment","<p>Python '
 'is a pretty versatile language. For which applications can you use '
 'Python?</p>","feedbacks",["^18",[]],"attachments",null,"title","When to use '
 'Python?","xp",50,"language","python","pre_exercise_code","","solution","","type","MultipleChoiceExercise","id",14024]],["^0",["sample_code","# '
 'Division\\\\nprint(5 / 8)\\\\n\\\\n\\\\nprint(7 + '
 '10)","sct","Ex().has_code(\\\\"#\\\\\\\\s*(\\\\\\\\w+)[\\\\\\\\s.!?]*print\\\\\\\\s*\\\\\\\\(\\\\\\\\s*7\\\\", '
 'not_typed_msg = \\\\"Make sure to add the comment right before `print(7 + '
 '10)`.\\\\")\\\\nsuccess_msg(\\\\"Great!\\\\")","instructions","<p>Above the '
 '<code>print(7 + 10)</code>, add the comment <code># '
 'Addition</code>.</p>","question","","hint","<p>For this exercise you only '
 "have to add one line of comments. It won't run as Python code. Add <code># "
 'Addition</code> right above <code>print(7 + '
 '10)</code>.</p>","possible_answers",["^18",[]],"number",4,"randomNumber",0.9235042773542923,"assignment","<p>Something '
 "that Filip didn't mention in his videos is that you can add "
 '<strong>comments</strong> to your Python scripts. Comments are important to '
 'make sure that you and others can understand what your code is '
 'about.</p>\\\\n<p>To add comments to your Python script, you can use the '
 '<code>#</code> tag. These comments are not run as Python code, so they will '
 'not influence your result. As an example, take the comment on the right, '
 '<code># Division</code>; it is completely ignored during '
 'execution.</p>","feedbacks",["^18",[]],"attachments",null,"title","Any '
 'comments?","xp",100,"language","python","pre_exercise_code","","solution","# '
 'Division\\\\nprint(5 / 8)\\\\n\\\\n# Addition\\\\nprint(7 + '
 '10)","type","NormalExercise","id",14025]],["^0",["sample_code","# Addition, '
 'subtraction\\\\nprint(5 + 5)\\\\nprint(5 - 5)\\\\n\\\\n# Multiplication, '
 'division, modulo, and exponentiation\\\\nprint(3 * 5)\\\\nprint(10 / '
 '2)\\\\nprint(18 % 7)\\\\nprint(4 ** 2)\\\\n\\\\n# How much is your $100 '
 'worth after 7 years?\\\\n","sct","Ex().has_printout(6, not_printed_msg = '
 '\\\\"Have you used `print(100 * 1.1 ** 7)` to print out the result of your '
 'calculations?\\\\")\\\\nsuccess_msg(\\\\"Time for another '
 'video!\\\\")","instructions","<p>Suppose you have $100, which you can invest '
 "with a 10% return each year. After one year, it's \\\\\\\\(100 \\\\\\\\times "
 "1.1 = 110\\\\\\\\) dollars, and after two years it's \\\\\\\\(100 "
 '\\\\\\\\times 1.1 \\\\\\\\times 1.1 = 121\\\\\\\\). Add code on the right to '
 'calculate how much money you end up with after 7 '
 'years.</p>","question","","hint","<p>After two years you have \\\\\\\\(100 '
 '\\\\\\\\times 1.1 \\\\\\\\times 1.1 = 100 \\\\\\\\times 1.1^2\\\\\\\\). How '
 'much do you have after 7 years than? Use <code>*</code> and '
 '<code>**</code>.</p>","possible_answers",["^18",[]],"number",5,"randomNumber",0.11540931103174779,"assignment","<p>Python '
 'is perfectly suited to do basic calculations. Apart from addition, '
 'subtraction, multiplication and division, there is also support for more '
 'advanced operations such as:</p>\\\\n<ul>\\\\n<li>Exponentiation: '
 '<code>**</code>. This operator raises the number to its left to the power of '
 'the number to its right. For example <code>4**2</code> will give '
 '<code>16</code>.</li>\\\\n<li>Modulo: <code>%</code>. This operator returns '
 'the remainder of the division of the number to the left by the number on its '
 'right. For example <code>18 % 7</code> equals '
 '<code>4</code>.</li>\\\\n</ul>\\\\n<p>The code in the script on the right '
 'gives some '
 'examples.</p>","feedbacks",["^18",[]],"attachments",null,"title","Python as '
 'a '
 'calculator","xp",100,"language","python","pre_exercise_code","","solution","# '
 'Addition, subtraction\\\\nprint(5 + 5)\\\\nprint(5 - 5)\\\\n\\\\n# '
 'Multiplication, division, modulo, and exponentiation\\\\nprint(3 * '
 '5)\\\\nprint(10 / 2)\\\\nprint(18 % 7)\\\\nprint(4 ** 2)\\\\n\\\\n# How much '
 'is your $100 worth after 7 years?\\\\nprint(100 * 1.1 ** '
 '7)","type","NormalExercise","id",14026]],["^0",["sample_code","","sct","","aspect_ratio",56.25,"instructions",null,"question","","hint",null,"possible_answers",["^18",[]],"number",6,"video_hls","//videos.datacamp.com/transcoded/735_intro_to_python/v1/hls-ch1_2.master.m3u8","randomNumber",0.16483831272137017,"assignment",null,"feedbacks",["^18",[]],"attachments",null,"title","Variables '
 '& '
 'Types","xp",50,"language","python","pre_exercise_code","","solution","","type","VideoExercise","id",14293,"projector_key","course_735_7df0925250c5fb2a647cd76fb09d446e","video_link","//player.vimeo.com/video/154561704"]],["^0",["sample_code","# '
 'Create a variable savings\\\\n\\\\n\\\\n# Print out '
 'savings\\\\n","sct","Ex().check_object(\\\\"savings\\\\").has_equal_value(incorrect_msg=\\\\"Assign '
 '`100` to the variable `savings`.\\\\")\\\\nEx().has_printout(0, '
 'not_printed_msg = \\\\"Print out `savings`, the variable you created, with '
 '`print(savings)`.\\\\")\\\\nsuccess_msg(\\\\"Great! Let\'s try to do some '
 'calculations with this variable '
 'now!\\\\")","instructions","<ul>\\\\n<li>Create a variable '
 '<code>savings</code> with the value 100.</li>\\\\n<li>Check out this '
 'variable by typing <code>print(savings)</code> in the '
 'script.</li>\\\\n</ul>","question","","hint","<ul>\\\\n<li>Type '
 '<code>savings = 100</code> to create the variable '
 '<code>savings</code>.</li>\\\\n<li>After creating the variable '
 '<code>savings</code>, you can type '
 '<code>print(savings)</code>.</li>\\\\n</ul>","possible_answers",["^18",[]],"number",7,"randomNumber",0.7161248444981172,"assignment","<p>In '
 'Python, a variable allows you to refer to a value with a name. To create a '
 'variable use <code>=</code>, like this example:</p>\\\\n<pre><code>x = '
 '5\\\\n</code></pre>\\\\n<p>You can now use the name of this variable, '
 '<code>x</code>, instead of the actual value, '
 '<code>5</code>.</p>\\\\n<p>Remember, <code>=</code> in Python means '
 "<em>assignment</em>, it doesn't test "
 'equality!</p>","feedbacks",["^18",[]],"attachments",null,"title","Variable '
 'Assignment","xp",100,"language","python","pre_exercise_code","","solution","# '
 'Create a variable savings\\\\nsavings = 100\\\\n\\\\n# Print out '
 'savings\\\\nprint(savings)","type","NormalExercise","id",14043]],["^0",["sample_code","# '
 'Create a variable savings\\\\nsavings = 100\\\\n\\\\n# Create a variable '
 'factor\\\\n\\\\n\\\\n# Calculate result\\\\n\\\\n\\\\n# Print out '
 'result","sct","Ex().check_correct(\\\\n  '
 'check_object(\\\\"result\\\\").has_equal_value(incorrect_msg=\\\\"Have you '
 'used `*` and `**` to calculate `result`?\\\\"),\\\\n  multi(\\\\n    '
 'check_object(\\\\"savings\\\\", missing_msg=\\\\"The variable `savings` was '
 "defined for you, don't remove "
 'it!\\\\").has_equal_value(incorrect_msg=\\\\"The variable `savings` should '
 'be `100`, like it was defined for you.\\\\"),\\\\n    '
 'check_object(\\\\"factor\\\\").has_equal_value(incorrect_msg=\\\\"The value '
 'of `factor` should be `1.1`.\\\\")\\\\n  )\\\\n)\\\\nEx().has_printout(0, '
 'not_printed_msg=\\\\"Don\'t forget to print out `result` at the end of your '
 'script.\\\\")\\\\nsuccess_msg(\\\\"Great!\\\\")","instructions","<ul>\\\\n<li>Create '
 'a variable <code>factor</code>, equal to <code>1.10</code>.</li>\\\\n<li>Use '
 '<code>savings</code> and <code>factor</code> to calculate the amount of '
 'money you end up with after 7 years. Store the result in a new variable, '
 '<code>result</code>.</li>\\\\n<li>Print out the value of '
 '<code>result</code>.</li>\\\\n</ul>","question","","hint","<ul>\\\\n<li>To '
 'create the variable <code>factor</code>, use <code>factor = '
 '1.10</code>.</li>\\\\n<li>In the example code block of the assignment, '
 'replace <code>100</code> with <code>savings</code> and <code>1.10</code> '
 'with <code>factor</code>: <code>savings * factor ** '
 '7</code>.</li>\\\\n<li>Use the <a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#print\\\\"><code>print()</code></a> '
 'function to print the value of a '
 'variable.</li>\\\\n</ul>","possible_answers",["^18",[]],"number",8,"randomNumber",0.4068100309450833,"assignment","<p>Remember '
 'how you calculated the money you ended up with after 7 years of investing '
 '$100? You did something like this:</p>\\\\n<pre><code>100 * 1.10 ** '
 '7\\\\n</code></pre>\\\\n<p>Instead of calculating with the actual values, '
 "you can use variables instead. The <code>savings</code> variable you've "
 "created in the previous exercise represents the $100 you started with. It's "
 'up to you to create a new variable to represent <code>1.10</code> and then '
 'redo the '
 'calculations!</p>","feedbacks",["^18",[]],"attachments",null,"title","Calculations '
 'with '
 'variables","xp",100,"language","python","pre_exercise_code","","solution","# '
 'Create a variable savings\\\\nsavings = 100\\\\n\\\\n# Create a variable '
 'factor\\\\nfactor = 1.1\\\\n\\\\n# Calculate result\\\\nresult = savings * '
 'factor ** 7\\\\n\\\\n# Print out '
 'result\\\\nprint(result)","type","NormalExercise","id",13726]],["^0",["sample_code","# '
 'Create a variable desc\\\\n\\\\n\\\\n# Create a variable '
 'profitable\\\\n","sct","Ex().check_object(\\\\"desc\\\\").has_equal_value()\\\\nEx().check_object(\\\\"profitable\\\\").has_equal_value()\\\\nsuccess_msg(\\\\"Nice!\\\\")","instructions","<ul>\\\\n<li>Create '
 'a new string, <code>desc</code>, with the value <code>\\\\"compound '
 'interest\\\\"</code>.</li>\\\\n<li>Create a new boolean, '
 '<code>profitable</code>, with the value '
 '<code>True</code>.</li>\\\\n</ul>","question","","hint","<ul>\\\\n<li>To '
 'create a variable in Python, use <code>=</code>. Make sure to wrap your '
 'string in single or double quotes.</li>\\\\n<li>Only two boolean values '
 'exist in Python: <code>True</code> and <code>False</code>. '
 '<code>TRUE</code>, <code>true</code>, <code>FALSE</code>, <code>false</code> '
 'and other versions will not be '
 'accepted.</li>\\\\n</ul>","possible_answers",["^18",[]],"number",9,"randomNumber",0.8141841437979944,"assignment","<p>In '
 'the previous exercise, you worked with two Python data '
 'types:</p>\\\\n<ul>\\\\n<li><code>int</code>, or integer: a number without a '
 'fractional part. <code>savings</code>, with the value <code>100</code>, is '
 'an example of an integer.</li>\\\\n<li><code>float</code>, or floating '
 'point: a number that has both an integer and fractional part, separated by a '
 'point. <code>factor</code>, with the value <code>1.10</code>, is an example '
 'of a float.</li>\\\\n</ul>\\\\n<p>Next to numerical data types, there are '
 'two other very common data types:</p>\\\\n<ul>\\\\n<li><code>str</code>, or '
 'string: a type to represent text. You can use single or double quotes to '
 'build a string.</li>\\\\n<li><code>bool</code>, or boolean: a type to '
 'represent logical values. Can only be <code>True</code> or '
 '<code>False</code> (the capitalization is '
 'important!).</li>\\\\n</ul>","feedbacks",["^18",[]],"attachments",null,"title","Other '
 'variable '
 'types","xp",100,"language","python","pre_exercise_code","","solution","# '
 'Create a variable desc\\\\ndesc = \\\\"compound interest\\\\"\\\\n\\\\n# '
 'Create a variable profitable\\\\nprofitable = '
 'True","type","NormalExercise","id",14044]],["^0",["sample_code","","sct","msg1 '
 '= \\\\"The type of `a` is not `int`. Try out `type(a)` and see for '
 'yourself.\\\\"\\\\nmsg2 = \\\\"`b` is not a `bool`, it\'s a `str`! The fact '
 'that `True` is wrapped in double quotes makes it a string.\\\\"\\\\nmsg3 = '
 '\\\\"Correcto perfecto!\\\\"\\\\nmsg4 = \\\\"None of the variable\'s types '
 'is correct here. Try `type(a)` and see what type this variable '
 'is.\\\\"\\\\nEx().has_chosen(3,[msg1, msg2, msg3, '
 'msg4])","instructions",["^18",["<code>a</code> is of type <code>int</code>, '
 '<code>b</code> is of type <code>str</code>, <code>c</code> is of type '
 '<code>bool</code>","<code>a</code> is of type <code>float</code>, '
 '<code>b</code> is of type <code>bool</code>, <code>c</code> is of type '
 '<code>str</code>","<code>a</code> is of type <code>float</code>, '
 '<code>b</code> is of type <code>str</code>, <code>c</code> is of type '
 '<code>bool</code>","<code>a</code> is of type <code>int</code>, '
 '<code>b</code> is of type <code>bool</code>, <code>c</code> is of type '
 '<code>str</code>"]],"question","","hint","<p>Use <code>type(a)</code>, '
 '<code>type(b)</code> and <code>type(c)</code> inside the IPython Shell to '
 "find out about the variables' "
 'types.</p>","possible_answers",["^18",[]],"number",10,"randomNumber",0.6940170179963574,"assignment","<p>To '
 'find out the type of a value or a variable that refers to that value, you '
 'can use the <a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#type\\\\"><code>type()</code></a> '
 "function. Suppose you've defined a variable <code>a</code>, but you forgot "
 'the type of this variable. To determine the type of <code>a</code>, simply '
 'execute:</p>\\\\n<pre><code>type(a)\\\\n</code></pre>\\\\n<p>We already went '
 'ahead and created three variables: <code>a</code>, <code>b</code> and '
 '<code>c</code>. You can use the IPython shell on the right to discover their '
 'type. Which of the following options is '
 'correct?</p>","feedbacks",["^18",[]],"attachments",null,"title","Guess the '
 'type","xp",50,"language","python","pre_exercise_code","a = 100*1.1**7\\\\nb '
 '= \\\\"True\\\\"\\\\nc = '
 'False","solution","","type","MultipleChoiceExercise","id",14347]],["^0",["sample_code","savings '
 '= 100\\\\nfactor = 1.1\\\\ndesc = \\\\"compound interest\\\\"\\\\n\\\\n# '
 'Assign product of factor and savings to year1\\\\n\\\\n\\\\n# Print the type '
 'of year1\\\\n\\\\n\\\\n# Assign sum of desc and desc to '
 'doubledesc\\\\n\\\\n\\\\n# Print out doubledesc\\\\n","sct","# '
 'predefined\\\\nmsg = \\\\"You don\'t have to change or remove the predefined '
 'variables.\\\\"\\\\nobjs = [\\\\"savings\\\\", \\\\"factor\\\\", '
 '\\\\"desc\\\\", \\\\"year1\\\\"]\\\\nEx().multi(\\\\n    '
 "check_object('savings', "
 'missing_msg=msg).has_equal_value(incorrect_msg=msg),\\\\n    '
 "check_object('factor', "
 'missing_msg=msg).has_equal_value(incorrect_msg=msg),\\\\n    '
 "check_object('desc', "
 'missing_msg=msg).has_equal_value(incorrect_msg=msg),\\\\n    '
 "check_object('year1', "
 'missing_msg=msg).has_equal_value(incorrect_msg=msg)\\\\n)\\\\n\\\\n# check '
 'year1 and printout\\\\nEx().multi(\\\\n    '
 'check_object(\\\\"year1\\\\").has_equal_value(incorrect_msg=\\\\"Multiply '
 '`savings` and `factor` to create the `year1` variable.\\\\"),\\\\n    '
 'has_printout(0, not_printed_msg = \\\\"__JINJA__:Use `{{sol_call}}` to print '
 'out the type of `year1`.\\\\")\\\\n)\\\\n\\\\n# check doubledesc and '
 'prinout\\\\nEx().multi(\\\\n    '
 'check_object(\\\\"doubledesc\\\\").has_equal_value(incorrect_msg  = '
 '\\\\"Have you stored the result of `desc + desc` in '
 '`doubledesc`?\\\\"),\\\\n    has_printout(1, not_printed_msg = \\\\"Don\'t '
 'forget to print out '
 '`doubledesc`.\\\\")\\\\n)\\\\n\\\\nsuccess_msg(\\\\"Nice. Notice how `desc + '
 'desc` causes `\\\\\\\\\\\\"compound interest\\\\\\\\\\\\"` and '
 '`\\\\\\\\\\\\"compound interest\\\\\\\\\\\\"` to be pasted '
 'together.\\\\")","instructions","<ul>\\\\n<li>Calculate the product of '
 '<code>savings</code> and <code>factor</code>. Store the result in '
 '<code>year1</code>.</li>\\\\n<li>What do you think the resulting type will '
 'be? Find out by printing out the type of '
 '<code>year1</code>.</li>\\\\n<li>Calculate the sum of <code>desc</code> and '
 '<code>desc</code> and store the result in a new variable '
 '<code>doubledesc</code>.</li>\\\\n<li>Print out <code>doubledesc</code>. Did '
 'you expect this?</li>\\\\n</ul>","question","","hint","<ul>\\\\n<li>Assign '
 '<code>factor * savings</code> to a new variable, '
 '<code>year1</code>.</li>\\\\n<li>To print the type of a variable '
 '<code>x</code>, use <code>print(type(x))</code>.</li>\\\\n<li>Assign '
 '<code>desc + desc</code> to a new variable, '
 '<code>doubledesc</code>.</li>\\\\n<li>To print a variable <code>x</code>, '
 'write <code>print(x)</code> in the '
 'script.</li>\\\\n</ul>","possible_answers",["^18",[]],"number",11,"randomNumber",0.5707300520766649,"assignment","<p>Filip '
 'mentioned that different types behave differently in Python.</p>\\\\n<p>When '
 "you sum two strings, for example, you'll get different behavior than when "
 'you sum two integers or two booleans.</p>\\\\n<p>In the script some '
 "variables with different types have already been created. It's up to you to "
 'use them.</p>","feedbacks",["^18",[]],"attachments",null,"title","Operations '
 'with other '
 'types","xp",100,"language","python","pre_exercise_code","","solution","savings '
 '= 100\\\\nfactor = 1.1\\\\ndesc = \\\\"compound interest\\\\"\\\\n\\\\n# '
 'Assign product of savings and factor to year1\\\\nyear1 = savings * '
 'factor\\\\n\\\\n# Print the type of year1\\\\nprint(type(year1))\\\\n\\\\n# '
 'Assign sum of desc and desc to doubledesc\\\\ndoubledesc = desc + '
 'desc\\\\n\\\\n# Print out '
 'doubledesc\\\\nprint(doubledesc)","type","NormalExercise","id",14046]],["^0",["sample_code","# '
 'Definition of savings and result\\\\nsavings = 100\\\\nresult = 100 * 1.10 '
 '** 7\\\\n\\\\n# Fix the printout\\\\nprint(\\\\"I started with $\\\\" + '
 'savings + \\\\" and now have $\\\\" + result + \\\\". '
 'Awesome!\\\\")\\\\n\\\\n# Definition of pi_string\\\\npi_string = '
 '\\\\"3.1415926\\\\"\\\\n\\\\n# Convert pi_string into float: '
 'pi_float\\\\n","sct","\\\\n# ensure predefined values are unmodified\\\\nmsg '
 '= \\\\"You don\'t have to change or remove the predefined '
 'variables.\\\\"\\\\nEx().multi(\\\\n    check_object(\\\\"savings\\\\", '
 'missing_msg=msg).has_equal_value(incorrect_msg=msg),\\\\n    '
 'check_object(\\\\"result\\\\", '
 'missing_msg=msg).has_equal_value(incorrect_msg=msg)\\\\n)\\\\n\\\\nEx().check_correct(\\\\n    '
 'has_printout(0),\\\\n    multi(\\\\n        check_function(\\\\"str\\\\", '
 '0).check_args(0).has_equal_value(incorrect_msg=\\\\"Inside the `print()` '
 'command, make sure to convert `savings` into a string with '
 '`str(savings)`.\\\\"),\\\\n        check_function(\\\\"str\\\\", '
 '1).check_args(0).has_equal_value(incorrect_msg=\\\\"Inside the `print()` '
 'command, make sure to convert `result` into a string '
 '`str(result)`.\\\\")\\\\n    )\\\\n)\\\\n\\\\n# check '
 'pi_float\\\\nEx().check_correct(\\\\n    '
 'check_object(\\\\"pi_float\\\\").has_equal_value(),\\\\n    '
 'multi(\\\\n        '
 'check_object(\\\\"pi_string\\\\").has_equal_value(),\\\\n        '
 'check_function(\\\\"float\\\\", missing_msg = \\\\"In order to convert '
 '`pi_string` to a float, be sure to use the `float()` '
 'function.\\\\").has_equal_value(incorrect_msg=\\\\"Use `float(pi_string) to '
 'create the variable `pi_float`.\\\\")\\\\n    '
 ')\\\\n)\\\\n\\\\nsuccess_msg(\\\\"Great! You have a profit of around $95; '
 'that\'s pretty awesome indeed!\\\\")","instructions","<ul>\\\\n<li>Hit '
 '<em>Run Code</em> to run the code on the right. Try to understand the error '
 'message.</li>\\\\n<li>Fix the code on the right such that the printout runs '
 'without errors; use the function <a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#func-str\\\\"><code>str()</code></a> '
 'to convert the variables to strings.</li>\\\\n<li>Convert the variable '
 '<code>pi_string</code> to a float and store this float as a new variable, '
 '<code>pi_float</code>.</li>\\\\n</ul>","question","","hint","<ul>\\\\n<li>You '
 'should use <a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#func-str\\\\"><code>str()</code></a> '
 'twice!</li>\\\\n<li>Use <a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#float\\\\"><code>float()</code></a> '
 'on <code>pi_string</code> and store the result in '
 '<code>pi_float</code>.</li>\\\\n</ul>","possible_answers",["^18",[]],"number",12,"randomNumber",0.747138727665914,"assignment","<p>Using '
 'the <code>+</code> operator to paste together two strings can be very useful '
 "in building custom messages.</p>\\\\n<p>Suppose, for example, that you've "
 'calculated the return of your investment and want to summarize the results '
 'in a string. Assuming the floats <code>savings</code> and '
 '<code>result</code> are defined, you can try something like '
 'this:</p>\\\\n<pre><code>print(\\\\"I started with $\\\\" + savings + \\\\" '
 'and now have $\\\\" + result + \\\\". '
 'Awesome!\\\\")\\\\n</code></pre>\\\\n<p>This will not work, though, as you '
 "cannot simply sum strings and floats.</p>\\\\n<p>To fix the error, you'll "
 'need to explicitly convert the types of your variables. More specifically, '
 "you'll need <a "
 'href=\\\\"https://docs.python.org/3/library/functions.html#func-str\\\\"><code>str()</code></a>, '
 'to convert a value into a string. <code>str(savings)</code>, for example, '
 'will convert the float <code>savings</code> to a string.</p>\\\\n<p>Similar '
 'functions such as <a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#int\\\\"><code>int()</code></a>, '
 '<a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#float\\\\"><code>float()</code></a> '
 'and <a '
 'href=\\\\"https://docs.python.org/3/library/functions.html#bool\\\\"><code>bool()</code></a> '
 'will help you convert Python values into any '
 'type.</p>","feedbacks",["^18",[]],"attachments",null,"title","Type '
 'conversion","xp",100,"language","python","pre_exercise_code","","solution","# '
 'Definition of savings and result\\\\nsavings = 100\\\\nresult = 100 * 1.10 '
 '** 7\\\\n\\\\n# Fix the printout\\\\nprint(\\\\"I started with $\\\\" + '
 'str(savings) + \\\\" and now have $\\\\" + str(result) + \\\\". '
 'Awesome!\\\\")\\\\n\\\\n# Definition of pi_string\\\\npi_string = '
 '\\\\"3.1415926\\\\"\\\\n\\\\n# Convert pi_string into float: '
 'pi_float\\\\npi_float = '
 'float(pi_string)","type","NormalExercise","id",14047]],["^0",["sample_code","","sct","msg1 '
 '= \\\\"Incorrect, this command runs perfectly fine.\\\\"\\\\nmsg2 = '
 '\\\\"It\'s perfectly possible to \'multiply strings\' in '
 'Python...\\\\"\\\\nmsg3 = \\\\"Correct! Because you\'re not converting `2` '
 'to a string with '
 '[`str()`](https://docs.python.org/3/library/functions.html#func-str), this '
 'will give an error.\\\\"\\\\nmsg4 = \\\\"`True + False` doesn\'t error out. '
 'Feel free to try it in the console to confirm!\\\\"\\\\nEx().has_chosen(3, '
 '[msg1, msg2, msg3, msg4])","instructions",["^18",["<code>\\\\"I can add '
 'integers, like \\\\"  + str(5) + \\\\" to '
 'strings.\\\\"</code>","<code>\\\\"I said \\\\" + (\\\\"Hey \\\\" * 2) + '
 '\\\\"Hey!\\\\"</code>","<code>\\\\"The correct answer to this multiple '
 'choice exercise is answer number \\\\" + 2</code>","<code>True + '
 'False</code>"]],"question","","hint","<p>Copy and paste the different '
 'expressions into the IPython Shell and try to figure out which one throws an '
 'error.</p>","possible_answers",["^18",[]],"number",13,"randomNumber",0.6339644897983434,"assignment","<p>Now '
 'that you know something more about combining different sources of '
 'information, have a look at the four Python expressions below.\\\\nWhich one '
 'of these will throw an error? You can always copy and paste this code in the '
 'IPython Shell to find '
 'out!</p>","feedbacks",["^18",[]],"attachments",null,"title","Can Python '
 'handle '
 'everything?","xp",50,"language","python","pre_exercise_code","","solution","","type","MultipleChoiceExercise","id",14253]]]]]]]]"')