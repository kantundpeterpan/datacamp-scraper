# List the sheets of an Excel file 

## Exercise

Before you can start importing from Excel, you should find out which sheets are available in the workbook. You can use the [`excel_sheets()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) function for this.

You will find the Excel file [`urbanpop.xlsx`](http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx) in your working directory (type [`dir()`](http://www.rdocumentation.org/packages/base/functions/list.files) to see it). This dataset contains urban population metrics for practically all countries in the world throughout time (Source: [Gapminder](http://www.gapminder.org/)). It contains three sheets for three different time periods. In each sheet, the first row contains the column names.

## Instructions

Load the `readxl` package using [`library()`](http://www.rdocumentation.org/packages/base/functions/library). It's already installed on DataCamp's servers.
Use [`excel_sheets()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) to print out the names of the sheets in `urbanpop.xlsx`.

## Code

```
# Load the readxl package
# Print out the names of both spreadsheets
 
```

```
# Load the readxl package
library(readxl)
# Print out the names of both spreadsheets
excel_sheets("urbanpop.xlsx")
 
```

Congratulations! As you can see, the result of [`excel_sheets()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) is simply a character vector; you haven't imported anything yet. That's something for the [`read_excel()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) function. Learn all about it in the next exercise!

# Import an Excel sheet 

## Exercise

Now that you know the names of the sheets in the Excel file you want to import, it is time to import those sheets into R. You can do this with the [`read_excel()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) function. Have a look at this recipe:

    data <- read_excel("data.xlsx", sheet = "my_sheet")

This call simply imports the sheet with the name `"my_sheet"` from the `"data.xlsx"` file. You can also pass a number to the `sheet` argument; this will cause [`read_excel()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) to import the sheet with the given sheet number. `sheet = 1` will import the first sheet, `sheet = 2` will import the second sheet, and so on.

In this exercise, you'll continue working with the [`urbanpop.xlsx`](http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx) file.

## Instructions

The code to import the first and second sheets is already included. Can you add a command to also import the third sheet, and store the resulting data frame in `pop_3`?
Store the data frames `pop_1`, `pop_2` and `pop_3` in a list, that you call `pop_list`.
Display the structure of `pop_list`.

## Code

```
# The readxl package is already loaded
# Read the sheets, one by one
pop_1 &lt;- read_excel("urbanpop.xlsx", sheet = 1)
pop_2 &lt;- read_excel("urbanpop.xlsx", sheet = 2)
# Put pop_1, pop_2 and pop_3 in a list: pop_list
# Display the structure of pop_list
 
```

```
# The readxl package is already loaded
# Read the sheets, one by one
pop_1 &lt;- read_excel("urbanpop.xlsx", sheet = 1)
pop_2 &lt;- read_excel("urbanpop.xlsx", sheet = 2)
pop_3 &lt;- read_excel("urbanpop.xlsx", sheet = 3)
# Put pop_1, pop_2 and pop_3 in a list: pop_list
pop_list &lt;- list(pop_1, pop_2, pop_3)
# Display the structure of pop_list
str(pop_list)
 
```

Great! Now you imported the sheets from `urbanpop.xlsx` correctly. From here on you are able to read and to operate on the imported file. In the next exercise you will learn how to use both the [`excel_sheets()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) and the [`read_excel()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) function in combination with [`lapply()`](http://www.rdocumentation.org/packages/base/functions/lapply) to read multiple sheets at once.

# Reading a workbook 

## Exercise

In the previous exercise you generated a list of three Excel sheets that you imported. However, loading in every sheet manually and then merging them in a list can be quite tedious. Luckily, you can automate this with [`lapply()`](http://www.rdocumentation.org/packages/base/functions/lapply). If you have no experience with [`lapply()`](http://www.rdocumentation.org/packages/base/functions/lapply), feel free to take [Chapter 4 of the Intermediate R course](https://campus.datacamp.com/courses/intermediate-r/chapter-4-the-apply-family?ex=1).

Have a look at the example code below:

    my_workbook <- lapply(excel_sheets("data.xlsx"),
                          read_excel,
                          path = "data.xlsx")

The [`read_excel()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) function is called multiple times on the `"data.xlsx"` file and each sheet is loaded in one after the other. The result is a list of data frames, each data frame representing one of the sheets in `data.xlsx`.

You're still working with the [`urbanpop.xlsx`](http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx) file.

## Instructions

Use [`lapply()`](http://www.rdocumentation.org/packages/base/functions/lapply) in combination with [`excel_sheets()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) and [`read_excel()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) to read all the Excel sheets in `"urbanpop.xlsx"`. Name the resulting list `pop_list`.
Print the structure of `pop_list`.

## Code

```
# The readxl package is already loaded
# Read all Excel sheets with lapply(): pop_list
# Display the structure of pop_list
 
```

```
# The readxl package is already loaded
# Read all Excel sheets with lapply(): pop_list
pop_list &lt;- lapply(excel_sheets("urbanpop.xlsx"), read_excel, path = "urbanpop.xlsx")
# Display the structure of pop_list
str(pop_list)
 
```

Congratulations! If you're clever, reading multiple Excel sheets doesn't require a lot of coding at all!

# The col_names argument 

## Exercise

Apart from `path` and `sheet`, there are several other arguments you can specify in [`read_excel()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf). One of these arguments is called `col_names`.

By default it is `TRUE`, denoting whether the first row in the Excel sheets contains the column names. If this is not the case, you can set `col_names` to `FALSE`. In this case, R will choose column names for you. You can also choose to set `col_names` to a character vector with names for each column. It works exactly the same as in the `readr` package.

You'll be working with the [`urbanpop_nonames.xlsx`](http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop_nonames.xlsx) file. It contains the same data as [`urbanpop.xlsx`](http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx) but has no column names in the first row of the excel sheets.

## Instructions

Import the *first* Excel sheet of `"urbanpop_nonames.xlsx"` and store the result in `pop_a`. Have R set the column names of the resulting data frame itself.
Import the first Excel sheet of `urbanpop_nonames.xlsx`; this time, use the `cols` vector that has already been preparedfor you to specify the column names. Store the resulting data frame in `pop_b`.
Print out the summary of `pop_a`.
Print out the summary of `pop_b`. Can you spot the difference with the other summary?

## Code

```
# The readxl package is already loaded
# Import the the first Excel sheet of urbanpop_nonames.xlsx (R gives names): pop_a
# Import the the first Excel sheet of urbanpop_nonames.xlsx (specify col_names): pop_b
cols &lt;- c("country", paste0("year_", 1960:1966))
# Print the summary of pop_a
# Print the summary of pop_b
 
```

```
# The readxl package is already loaded
# Import the the first Excel sheet of urbanpop_nonames.xlsx (R gives names): pop_a
pop_a &lt;- read_excel("urbanpop_nonames.xlsx", col_names = FALSE)
# Import the the first Excel sheet of urbanpop_nonames.xlsx (specify col_names): pop_b
cols &lt;- c("country", paste0("year_", 1960:1966))
pop_b &lt;- read_excel("urbanpop_nonames.xlsx", col_names = cols)
# Print the summary of pop_a
summary(pop_a)
# Print the summary of pop_b
summary(pop_b)
 
```

Well done! Did you spot the difference between the summaries? It's really crucial to correctly tell R whether your Excel data contains column names. If you don't, the head of the data frame you end up with will contain incorrect information...

# The skip argument 

## Exercise

Another argument that can be very useful when reading in Excel files that are less tidy, is `skip`. With `skip`, you can tell R to ignore a specified number of rows inside the Excel sheets you're trying to pull data from. Have a look at this example:

    read_excel("data.xlsx", skip = 15)

In this case, the first 15 rows in the first sheet of `"data.xlsx"` are ignored.

If the first row of this sheet contained the column names, this information will also be ignored by `readxl`. Make sure to set `col_names` to `FALSE` or manually specify column names in this case!

The file [`urbanpop.xlsx`](http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xlsx) is available in your directory; it has column names in the first rows.

## Instructions

Import the *second* sheet of `"urbanpop.xlsx"`, but skip the first 21 rows. Make sure to set `col_names = FALSE`. Store the resulting data frame in a variable `urbanpop_sel`.
Select the first observation from `urbanpop_sel` and print it out.

## Code

```
# The readxl package is already loaded
# Import the second sheet of urbanpop.xlsx, skipping the first 21 rows: urbanpop_sel
# Print out the first observation from urbanpop_sel
 
```

```
# The readxl package is already loaded
# Import the second sheet of urbanpop.xlsx, skipping the first 21 rows: urbanpop_sel
urbanpop_sel &lt;- read_excel("urbanpop.xlsx", sheet = 2, col_names = FALSE, skip = 21)
# Print out the first observation from urbanpop_sel
urbanpop_sel[1,]
 
```

Nice job! This is about as complicated as the [`read_excel()`](https://cran.r-project.org/web/packages/readxl/readxl.pdf) call can get! Time to learn about another package to import data from Excel: gdata.

# Import a local file 

## Exercise

In this part of the chapter you'll learn how to import `.xls` files using the `gdata` package. Similar to the `readxl` package, you can import single Excel sheets from Excel sheets to start your analysis in R.

You'll be working with the [`urbanpop.xls`](http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xls) dataset, the `.xls` version of the Excel file you've been working with before. It's available in your current working directory.

## Instructions

Load the `gdata` package with [`library()`](http://www.rdocumentation.org/packages/base/functions/library). `gdata` and Perl are already installed on DataCamp's Servers.
Import the second sheet, named `"1967-1974"`, of `"urbanpop.xls"` with [`read.xls()`](http://www.rdocumentation.org/packages/gdata/functions/read.xls). Store the resulting data frame as `urban_pop`.
Print the first 11 observations of `urban_pop` with [`head()`](http://www.rdocumentation.org/packages/utils/functions/head).

## Code

```
# Load the gdata package
# Import the second sheet of urbanpop.xls: urban_pop
# Print the first 11 observations using head()
 
```

```
# Load the gdata package
library(gdata)
# Import the second sheet of urbanpop.xls: urban_pop
urban_pop &lt;- read.xls("urbanpop.xls", sheet = "1967-1974")
# Print the first 11 observations using head()
head(urban_pop, n = 11)
 
```

Congratulations! There seems to be a lot of missing data, but [`read.xls()`](http://www.rdocumentation.org/packages/gdata/functions/read.xls) knows how to handle it. In the next exercise you will learn which arguments you can use in `read.xls()`.

# read.xls() wraps around read.table() 

## Exercise

Remember how [`read.xls()`](http://www.rdocumentation.org/packages/gdata/functions/read.xls) actually works? It basically comes down to two steps: converting the Excel file to a `.csv` file using a Perl script, and then reading that `.csv` file with the [`read.csv()`](http://www.rdocumentation.org/packages/utils/functions/read.table) function that is loaded by default in R, through the `utils` package.

This means that all the options that you can specify in [`read.csv()`](http://www.rdocumentation.org/packages/utils/functions/read.table), can also be specified in [`read.xls()`](http://www.rdocumentation.org/packages/gdata/functions/read.xls).

The [`urbanpop.xls`](http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xls) dataset is already available in your workspace. It's still comprised of three sheets, and has column names in the first row of each sheet.

## Instructions

Finish the `read.xls()` call that reads data from the second sheet of `urbanpop.xls`: skip the first 50 rows of the sheet. Make sure to set `header` appropriately and that the country names are not imported as factors.
Print the first 10 observations of `urban_pop` with `head()`.

## Code

```
# The gdata package is alreaded loaded
# Column names for urban_pop
columns &lt;- c("country", paste0("year_", 1967:1974))
# Finish the read.xls call
urban_pop &lt;- read.xls("urbanpop.xls", sheet = 2,
skip = ___, header = ___, stringsAsFactors = ___,
col.names = columns)
# Print first 10 observation of urban_pop
 
```

```
# The gdata package is alreaded loaded
# Column names for urban_pop
columns &lt;- c("country", paste0("year_", 1967:1974))
# Finish the read.xls call
urban_pop &lt;- read.xls("urbanpop.xls", sheet = 2,
skip = 50, header = FALSE, stringsAsFactors = FALSE,
col.names = columns)
# Print first 10 observation of urban_pop
head(urban_pop, n = 10)
 
```

Great! Continue to the next exercise.

# Work that Excel data! 

## Exercise

Now that you can read in Excel data, let's try to clean and merge it. You already used the [`cbind()`](http://www.rdocumentation.org/packages/base/functions/cbind) function some exercises ago. Let's take it one step further now.

The [`urbanpop.xls`](http://s3.amazonaws.com/assets.datacamp.com/production/course_1477/datasets/urbanpop.xls) dataset is available in your working directory. The file still contains three sheets, and has column names in the first row of each sheet.

## Instructions

Add code to read the data from the third sheet in `"urbanpop.xls"`. You want to end up with three data frames: `urban_sheet1`, `urban_sheet2` and `urban_sheet3`.
Extend the `cbind()` call so that it also includes `urban_sheet3`. Make sure the first column of `urban_sheet2` and `urban_sheet3` are removed, so you don't have duplicate columns. Store the result in `urban`.
Use [`na.omit()`](http://www.rdocumentation.org/packages/stats/functions/na.fail) on the `urban` data frame to remove all rows that contain `NA` values. Store the cleaned data frame as `urban_clean`.
Print a summary of `urban_clean` and assert that there are no more `NA` values.

## Code

```
# Add code to import data from all three sheets in urbanpop.xls
path &lt;- "urbanpop.xls"
urban_sheet1 &lt;- read.xls(path, sheet = 1, stringsAsFactors = FALSE)
urban_sheet2 &lt;- read.xls(path, sheet = 2, stringsAsFactors = FALSE)
# Extend the cbind() call to include urban_sheet3: urban
urban &lt;- cbind(urban_sheet1, urban_sheet2[-1])
# Remove all rows with NAs from urban: urban_clean
# Print out a summary of urban_clean
 
```

```
# Import all sheets from urbanpop.xls
path &lt;- "urbanpop.xls"
urban_sheet1 &lt;- read.xls(path, sheet = 1, stringsAsFactors = FALSE)
urban_sheet2 &lt;- read.xls(path, sheet = 2, stringsAsFactors = FALSE)
urban_sheet3 &lt;- read.xls(path, sheet = 3, stringsAsFactors = FALSE)
# Extend the cbind() call to include urban_sheet3: urban_all
urban &lt;- cbind(urban_sheet1, urban_sheet2[-1], urban_sheet3[-1])
# Remove all rows with NAs from urban: urban_clean
urban_clean &lt;- na.omit(urban)
# Print out a summary of urban_clean
summary(urban_clean)
 
```

Awesome! Time for something totally different: `XLConnect`.

